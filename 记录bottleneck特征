generator = datagen.flow_from_directory('data/train'#路径,target_size=(150, 150),batch_size=32,
        class_mode=None,  # this means our generator will only yield batches of data, no labels
        shuffle=False ) #data is in order
bottleneck_features_train = model.predict_generator(generator, 2000)
np.save(open('bottleneck_features_train.npy', 'w'), bottleneck_features_train)

generator = datagen.flow_from_directory('data/validation',target_size=(150, 150),batch_size=32,
        class_mode=None,shuffle=False)
bottleneck_features_validation = model.predict_generator(generator, 800)
np.save(open('bottleneck_features_validation.npy', 'w'), bottleneck_features_validation)

#将数据载入，用于训练全连接网络
train_data = np.load(open('bottleneck_features_train.npy'))  #特征是in order的，可以直接创建label
train_labels = np.array([0] * 1000 + [1] * 1000)
validation_data = np.load(open('bottleneck_features_validation.npy'))
validation_labels = np.array([0] * 400 + [1] * 400)
#创建新全连接网络
model = Sequential()
model.add(Flatten(input_shape=train_data.shape[1:]))
model.add(Dense(256, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='rmsprop',loss='binary_crossentropy',metrics=['accuracy'])
model.fit(train_data, train_labels,nb_epoch=50, batch_size=32,validation_data=(validation_data, validation_labels))
model.save_weights('bottleneck_fc_model.h5')
